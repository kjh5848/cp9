---
description: Next.js 15 함수 분류·네이밍·지침
globs:
  - "app/**/*.{ts,tsx,js}"
alwaysApply: true
---

# Next.js 15 함수 분류·네이밍·지침

## 1. React 컴포넌트 계층

| 구분 | 파일 규칙 | 주요 지침 |
|------|-----------|-----------|
| **Server Component** | 기본값 · 파일 상단 **`'use client'` 지시어 없음** | 데이터 패칭·렌더 전용. 브라우저 API 금지 |
| **Client Component** | 파일 첫 줄 `'use client'` | 이벤트 핸들러·상태 관리에만 사용 |

## 2. 서버 함수 계층

| 종류 | 선언 예 | 위치·네이밍 규칙 | 참고 |
|------|---------|-----------------|-------|
| **Route Handler** | `export async function GET(req:Request){}` | `app/api/**/route.ts` <br>메서드 이름은 HTTP Verb 대문자 | API 엔드포인트 |
| **Middleware** | `export default function middleware(req){}` | `middleware.ts` · 프로젝트 루트 단일 | 요청 전처리 |
| **Server Action** | ```ts async function addToCart(){'use server'}``` | 컴포넌트 내부 또는 `actions/` 폴더. 함수명은 동사+명사(camelCase) | 서버 측 액션 |
| **Edge Function** | `export const runtime='edge'` | `app/edge/**/route.ts` · 파일명 kebab-case | 엣지 런타임 |

> **중요**: Route Handler와 Server Action 중복 사용 지양. 동기 ↔ 비동기 흐름을 명확히 구분하세요.

## 3. React Hooks

- **커스텀 훅**은 **`use` 접두어 + PascalCase** (예: `useProductList`)
- 위치: `app/hooks/`
- 훅 안에서 Server Action 직접 호출 금지 → 별도 서비스 함수로 분리

## 4. 유틸리티·서비스 함수

| 범주 | 규칙 |
|------|------|
| **Pure Utility** | `lib/*.ts` · 함수형(FP) 스타일 · 불변 데이터 우선 |
| **도메인 Service(OOP)** | `src/domain/**/service/*.ts` · 클래스 또는 Namespace 모듈 사용 |

## 5. 공통 네이밍 가이드

1. 동작이 **부수효과**(I/O) 생성 → `verbNoun` (ex. `fetchUser`)
2. **순수 계산** → `calc`, `format`, `to` 접두어 사용
3. 테스트 파일은 동일 경로 `*.spec.ts(x)` 형태로 저장

## 6. JSDoc 태그

모든 공개 함수(Handler·Action·Hook)는 다음 태그 필수:

```typescript
/**
 * @description 함수의 목적과 동작을 설명
 * @param {type} paramName - 파라미터 설명
 * @returns {type} 반환값 설명
 * @example
 * // 사용 예시
 * const result = await fetchUserData('123');
 * @throws {Error} 에러 발생 조건
 * @since 1.0.0
 * @category Server Action | Route Handler | Hook | Utility
 */
```

## 7. AI 동작 지시

- 새 함수를 생성할 때 위 **카테고리·위치·네이밍**을 자동 추천한다.
- 분류가 불명확하면 "어떤 유형 함수인지"를 사용자에게 먼저 물어본다.
- 함수 생성 시 적절한 JSDoc 태그를 자동으로 추가한다.
- 파일 위치와 네이밍 규칙을 준수하도록 안내한다.
